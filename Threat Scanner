import tkinter as tk
from tkinter import filedialog
import logging
import virustotal_python
from virustotal_python import Virustotal

# create the GUI window
root = tk.Tk()
root.title("VirusTotal Scanner")

# create a text field for the API key
key_label = tk.Label(root, text="Enter your VirusTotal API key:")
key_label.pack()
key_entry = tk.Entry(root, width=50)
key_entry.pack()

# create a text field for the file or URL
file_label = tk.Label(root, text="Enter the file path or URL to scan:")
file_label.pack()
file_entry = tk.Entry(root, width=50)
file_entry.pack()

# create a text field for the output file
output_label = tk.Label(root, text="Select the output file:")
output_label.pack()
output_entry = tk.Entry(root, width=50)
output_entry.pack()

# create a button to select the output file
def select_output_file():
    output_file = filedialog.asksaveasfilename(defaultextension=".txt")
    if output_file:
        output_entry.delete(0, tk.END)
        output_entry.insert(0, output_file)

output_button = tk.Button(root, text="Select Output File", command=select_output_file)
output_button.pack()

# create a logger for displaying status messages to the user
logger = logging.getLogger("VirusTotal Scanner")
logger.setLevel(logging.INFO)
log_handler = logging.StreamHandler()
log_handler.setFormatter(logging.Formatter("%(message)s"))
logger.addHandler(log_handler)

# function to start the scan
def start_scan():
    api_key = key_entry.get()
    file_path = file_entry.get()
    output_file = output_entry.get()

    # check that the API key and file or URL are valid
    if not api_key:
        logger.error("Please enter a valid VirusTotal API key.")
        return

    if not file_path:
        logger.error("Please enter a valid file path or URL to scan.")
        return

    # create a new VirusTotal client
    vt = Virustotal(api_key)

    # scan the file or URL and retrieve the scan ID
    logger.info("Scanning file or URL...")
    try:
        response = vt.scan_file(file_path)
    except virustotal_python.ApiError as e:
        logger.error("Failed to scan file or URL: {}".format(str(e)))
        return

    resource = response["resource"]

    # wait for the scan to complete and retrieve the scan report
    logger.info("Waiting for scan to complete...")
    try:
        vt.wait_for_file_report(resource)
    except virustotal_python.ApiError as e:
        logger.error("Failed to retrieve scan report: {}".format(str(e)))
        return

    report = vt.get_file_report(resource)

    # write the results to the output file
    logger.info("Writing results to output file...")
    try:
        with open(output_file, "w") as f:
            f.write(str(response))
            f.write("\n\n")
            f.write(str(report))
    except Exception as e:
        logger.error("Failed to write results to output file: {}".format(str(e)))
        return

    logger.info("Scan completed successfully. Results written to {}.".format(output_file))

scan_button = tk.Button(root, text="Start Scan", command=start_scan)
scan_button.pack()

# start the GUI event loop
root.mainloop()


